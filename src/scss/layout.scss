// mixin definition ; sets LTR and RTL within the same style call
// @see https://css-tricks.com/almanac/properties/d/direction/

@mixin rtl($prop, $ltr-value, $rtl-value) {
	#{$prop}: $ltr-value;
	[dir=rtl] & {
		#{$prop}: $rtl-value;
	}
}

@mixin rtl-prop($ltr-prop, $rtl-prop, $value, $reset-value) {
	#{$ltr-prop}: $value;
	[dir=rtl] & {
		#{$ltr-prop}: $reset-value;
		#{$rtl-prop}: $value;
	}
}

// To reverse padding (top left bottom right) -> (top right bottom left)
@function rtl-value($list) {
	@if length($list) == 4 {
		@return nth($list, 1) nth($list, 4) nth($list, 3) nth($list, 2);
	}
	@if length($list) == 5 {
		@return nth($list, 1) nth($list, 4) nth($list, 3) nth($list, 2) nth($list, 5);
	}
	@return $list;
}

@mixin order-for-name($sizes:null) {
	@if $sizes == null {
		$sizes: '';

		.order {
			order: 0;
		}
	}

	@for $i from -5 through 5 {
		$order: '';

		@each $s in $sizes {
			@if $s != '' {
				$order: '.order-#{$s}-#{$i}';
			}
			@else {
				$order: '.order-#{$i}';
			}
		}

		#{$order} {
			order: #{$i};
		}
	}
}

@mixin offset-for-name($sizes:null) {
	@if $sizes == null {
		$sizes: '';
	}

	@for $i from 0 through 19 {
		$offsets: '';
		$suffix: '';

		@each $s in $sizes {
			@if $s != '' {
				$suffix: '-#{$s}';
			}

			$offsets: '.offset#{$suffix}-#{$i * 5}';
		}

		#{$offsets} {
			@if $i != 0 {
				@include rtl-prop(margin-left, margin-right, #{$i * 5 + '%'}, auto);
			}
			@else {
				@include rtl-prop(margin-left, margin-right, 0, auto);
			}
		}
	}

	@each $i in 33 {
		$offsets: '';
		$suffix: '';

		@each $s in $sizes {
			@if $s != '' {
				$suffix: '-#{$s}';
			}

			$offsets: '.offset#{$suffix}-#{$i * 5}';
		}

		#{$offsets} {
			margin-left: calc(100% / 3);
		}
	}

	@each $i in 66 {
		$offsets: '';
		$suffix: '';

		@each $s in $sizes {
			@if $s != '' {
				$suffix: '-#{$s}';
			}

			$offsets: '.offset#{$suffix}-#{$i * 5}';
		}

		#{$offsets} {
			@include rtl-prop(margin-left, margin-right, calc(200% / 3), auto);
		}
	}
}

@mixin layout-for-name($name: null) {
	@if $name == null {
		$name: '';
	}
	@if $name != '' {
		$name: '-#{$name}';
	}

	.layout#{$name},
	.layout#{$name}-column,
	.layout#{$name}-row {
		box-sizing: border-box;
		display: -webkit-box;
		display: -webkit-flex;
		display: -moz-box;
		display: -ms-flexbox;
		display: flex;
	}
	.layout#{$name}-column {
		flex-direction: column;
	}
	.layout#{$name}-row {
		flex-direction: row;
	}

	.layout#{$name}-wrap {
		flex-wrap: wrap;
	}

	.layout#{$name}-nowrap {
		flex-wrap: nowrap;
	}
}

@mixin flex-properties-for-name($name: null) {
	$flexName: 'flex';
	@if $name != null {
		$flexName: 'flex-#{$name}';
		$name: '-#{$name}';
	}
	@else {
		$name: '';
	}

	.#{$flexName} {
		flex: 1; // === flex: 1 1 0%;
		box-sizing: border-box;
	}

	.#{$flexName}-grow   // === flex: 1 1 0%;{ flex: 1 1 100%;  box-sizing: border-box; }
  .#{$flexName}-initial {
		flex: 0 1 auto;
		box-sizing: border-box;
	}
	.#{$flexName}-auto {
		flex: 1 1 auto;
		box-sizing: border-box;
	}
	.#{$flexName}-none {
		flex: 0 0 auto;
		box-sizing: border-box;
	}
	.#{$flexName}-noshrink {
		flex: 1 0 auto;
		box-sizing: border-box;
	}
	.#{$flexName}-nogrow {
		flex: 0 1 auto;
		box-sizing: border-box;
	}

	// (1-20) * 5 = 0-100%
	@for $i from 0 through 20 {
		$value: #{$i * 5 + '%'};

		.#{$flexName}-#{$i * 5} {
			flex: 1 1 100%;
			max-width: #{$value};
			max-height: 100%;
			box-sizing: border-box;
		}

		.layout-row > .#{$flexName}-#{$i * 5} {
			flex: 1 1 100%;
			max-width: #{$value};
			max-height: 100%;
			box-sizing: border-box;

			// Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
			@if $i == 0 {
				min-width: 0;
			}
		}

		.layout-column > .#{$flexName}-#{$i * 5} {
			flex: 1 1 100%;
			max-width: 100%;
			max-height: #{$value};
			box-sizing: border-box;
		}

		.layout#{$name}-row > .#{$flexName}-#{$i * 5} {
			flex: 1 1 100%;
			max-width: #{$value};
			max-height: 100%;
			box-sizing: border-box;

			// Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
			@if $i == 0 {
				min-width: 0;
			}
		}

		.layout#{$name}-column > .#{$flexName}-#{$i * 5} {
			flex: 1 1 100%;
			max-width: 100%;
			max-height: #{$value};
			box-sizing: border-box;

			// Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
			@if $i == 0 {
				min-height: 0;
			}
		}
	}

	.layout-row {
		> .#{$flexName}-33 {
			flex: 1 1 33.33%;
			max-width: 33.33%;
			max-height: 100%;
			box-sizing: border-box;
		}
		> .#{$flexName}-66 {
			flex: 1 1 66.66%;
			max-width: 66.66%;
			max-height: 100%;
			box-sizing: border-box;
		}
	}

	.layout-column {
		> .#{$flexName}-33 {
			flex: 1 1 33.33%;
			max-width: 100%;
			max-height: 33.33%;
			box-sizing: border-box;
		}
		> .#{$flexName}-66 {
			flex: 1 1 66.66%;
			max-width: 100%;
			max-height: 66.66%;
			box-sizing: border-box;
		}
	}

	.layout#{$name}-row {
		> .#{$flexName}-33 {
			flex: 1 1 100%;
			max-width: 33.33%;
			max-height: 100%;
			box-sizing: border-box;
		}
		> .#{$flexName}-66 {
			flex: 1 1 100%;
			max-width: 66.66%;
			max-height: 100%;
			box-sizing: border-box;
		}

		// Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
		> .flex {
			min-width: 0;
		}
	}

	.layout#{$name}-column {
		> .#{$flexName}-33 {
			flex: 1 1 100%;
			max-width: 100%;
			max-height: 33.33%;
			box-sizing: border-box;
		}
		> .#{$flexName}-66 {
			flex: 1 1 100%;
			max-width: 100%;
			max-height: 66.66%;
			box-sizing: border-box;
		}

		// Bug workaround for http://crbug.com/546034 - flex issues on Chrome 48
		> .flex {
			min-height: 0;
		}
	}
}

@mixin align-for-name($suffix: null) {
	// Alignment attributes for layout containers' children
	// Arrange on the Main Axis
	// center, start, end, between, around
	// flex-start is the default for justify-content
	// ------------------------------

	$name: 'align';
	@if $suffix != null {
		$name: 'align-#{$suffix}';
	}

	.#{$name}, .#{$name}-start-stretch {
		justify-content: flex-start;
		align-content: stretch;
		align-items: stretch;
	}

	// Main Axis Center
	.#{$name}-start,
	.#{$name}-start-start,
	.#{$name}-start-center,
	.#{$name}-start-end,
	.#{$name}-start-stretch {
		justify-content: flex-start;
	}

	// Main Axis Center
	.#{$name}-center,
		//stretch
	.#{$name}-center-start,
	.#{$name}-center-center,
	.#{$name}-center-end,
	.#{$name}-center-stretch {
		justify-content: center;
	}

	// Main Axis End
	.#{$name}-end,
		//stretch
	.#{$name}-end-start,
	.#{$name}-end-center,
	.#{$name}-end-end,
	.#{$name}-end-stretch {
		justify-content: flex-end;
	}

	// Main Axis Space Around
	.#{$name}-around,
		//stretch
	.#{$name}-around-center,
	.#{$name}-around-start,
	.#{$name}-around-end,
	.#{$name}-around-stretch {
		justify-content: space-around;
	}

	// Main Axis Space Between
	.#{$name}-between,
		//stretch
	.#{$name}-between-center,
	.#{$name}-between-start,
	.#{$name}-between-end,
	.#{$name}-between-stretch {
		justify-content: space-between;
	}

	// Arrange on the Cross Axis
	// center, start, end
	// stretch is the default for align-items
	// ------------------------------

	// Cross Axis Start
	.#{$name}-start-start,
	.#{$name}-center-start,
	.#{$name}-end-start,
	.#{$name}-between-start,
	.#{$name}-around-start {
		align-items: flex-start;
		align-content: flex-start;
	}

	// Cross Axis Center
	.#{$name}-start-center,
	.#{$name}-center-center,
	.#{$name}-end-center,
	.#{$name}-between-center,
	.#{$name}-around-center {
		align-items: center;
		align-content: center;
		max-width: 100%;
	}

	// Cross Axis Center IE overflow fix
	.#{$name}-start-center > *,
	.#{$name}-center-center > *,
	.#{$name}-end-center > *,
	.#{$name}-between-center > *,
	.#{$name}-around-center > * {
		max-width: 100%;
		box-sizing: border-box;
	}

	// Cross Axis End
	.#{$name}-start-end,
	.#{$name}-center-end,
	.#{$name}-end-end,
	.#{$name}-between-end,
	.#{$name}-around-end {
		align-items: flex-end;
		align-content: flex-end;
	}

	// Cross Axis Start
	.#{$name}-start-stretch,
	.#{$name}-center-stretch,
	.#{$name}-end-stretch,
	.#{$name}-between-stretch,
	.#{$name}-around-stretch {
		align-items: stretch;
		align-content: stretch;
	}
}

@mixin layouts_for_breakpoint($name:null) {
	@include order-for-name($name);
	//@include offset-for-name($name);
	@include align-for-name($name);

	@include flex-properties-for-name($name);
	@include layout-for-name($name);
}

@include layouts_for_breakpoint();
@media screen and (max-width: 599px) {
	@include layouts_for_breakpoint('xs');
}
@media screen and (min-width: 600px)/* and (max-width: 959px)*/ {
	@include layouts_for_breakpoint('sm');
}
@media screen and (min-width: 960px)/* and (max-width: 1279px)*/ {
	@include layouts_for_breakpoint('md');
}
@media screen and (min-width: 1280px)/* and (max-width: 1919px)*/ {
	@include layouts_for_breakpoint('lg');
}